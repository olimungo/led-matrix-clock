#include <math.h>
#include <stdio.h>
#include <EEPROM.h>
#include <TimeLib.h>
#include <Wire.h>
#include <LEDMatrixDriver.hpp>
#include <DS1302.h>
// #include <Rtc_Pcf8563.h> // SCL - A5, SDA - A4, INT - 3

#define CLOCK_DS1302 1

#define ROWS 8
#define NUM_DEVICES 4

#define CLOCK_RESET 5
#define CLOCK_DATA 6
#define CLOCK_CLOCK 7

#define MATRIX_CS_PIN 9 // DIN (MOSI) : 11 - CLK: 13

#define MAIN_SWITCH_PIN 0
#define SECONDARY_SWITCH_PIN 2
#define TERNARY_SWITCH_PIN 3

#define BUZZER 4

#define MODE_CLOCK 0
#define MODE_CHRONO 1
#define MODE_TIMER 2
#define MODE_SET_CLOCK 3
#define MODE_SETUP 4

#define SETCLOCK_HOUR1 0
#define SETCLOCK_HOUR2 1
#define SETCLOCK_MINUTE1 2
#define SETCLOCK_MINUTE2 3

#define CHRONO_PAUSED 0
#define CHRONO_RUNNING 1

#define TIMER_HOUR1 0
#define TIMER_HOUR2 1
#define TIMER_MINUTE1 2
#define TIMER_MINUTE2 3
#define TIMER_SECOND1 4
#define TIMER_SECOND2 5
#define TIMER_PAUSED 6
#define TIMER_RUNNING 7
#define TIMER_OVER 8

#define SETUP_TIME_SHORT 0
#define SETUP_TIME_FULL 1

struct Config {
  int timeFormat;
  unsigned long timer;
};

const byte alphabet[95][8] = {
  {0,0,0,0,0,0,0,0}, // SPACE
  {0x10,0x18,0x18,0x18,0x18,0x00,0x18,0x18}, // EXCL
  {0x28,0x28,0x08,0x00,0x00,0x00,0x00,0x00}, // QUOT
  {0x00,0x0a,0x7f,0x14,0x28,0xfe,0x50,0x00}, // #
  {0x10,0x38,0x54,0x70,0x1c,0x54,0x38,0x10}, // $
  {0x00,0x60,0x66,0x08,0x10,0x66,0x06,0x00}, // %
  {0,0,0,0,0,0,0,0}, // &
  {0x00,0x10,0x18,0x18,0x08,0x00,0x00,0x00}, // '
  {0x02,0x04,0x08,0x08,0x08,0x08,0x08,0x04}, // (
  {0x40,0x20,0x10,0x10,0x10,0x10,0x10,0x20}, // )
  {0x00,0x10,0x54,0x38,0x10,0x38,0x54,0x10}, // *
  {0x00,0x08,0x08,0x08,0x7f,0x08,0x08,0x08}, // +
  {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x08}, // COMMA
  {0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00}, // -
  {0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06}, // DOT
  {0x00,0x04,0x04,0x08,0x10,0x20,0x40,0x40}, // /
  {0xf,0xd,0xd,0xd,0xd,0xd,0xd,0xf}, // 0
  {0x3,0x7,0xb,0x3,0x3,0x3,0x3,0x3}, // 1
  {0xe,0x3,0x3,0x6,0xc,0xc,0xc,0xf}, // 2
  {0xf,0x3,0x3,0xf,0x3,0x3,0x3,0xf}, // 3
  {0x8,0x8,0x9,0xf,0x3,0x3,0x3,0x3}, // 4
  {0xf,0xc,0xc,0xf,0x3,0x3,0x3,0xf}, // 5
  {0x8,0x8,0x8,0xf,0xd,0xd,0xd,0xf}, // 6
  {0xf,0x3,0x3,0x3,0x3,0x3,0x3,0x3}, // 7
  {0xf,0xd,0xd,0xf,0xd,0xd,0xd,0xf}, // 8
  {0xf,0xb,0xb,0xf,0x3,0x3,0x3,0x3}, // 9
  {0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0}, // :
  {0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x08}, // ;
  {0x00,0x10,0x20,0x40,0x80,0x40,0x20,0x10}, // <
  {0x00,0x00,0x7e,0x00,0x00,0xfc,0x00,0x00}, // =
  {0x00,0x08,0x04,0x02,0x01,0x02,0x04,0x08}, // >
  {0x00,0x38,0x44,0x04,0x08,0x10,0x00,0x10}, // ?
  {0x00,0x30,0x48,0xba,0xba,0x84,0x78,0x00}, // @
  {0xf8,0xc8,0xc8,0xf8,0xf8,0xc8,0xc8,0xc8}, // A
  {0x00,0x78,0x44,0x44,0x78,0x44,0x44,0x7c}, // B
  {0xf8,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xf8}, // C
  {0x00,0x7c,0x42,0x42,0x42,0x42,0x44,0x78}, // D
  {0xf8,0xc0,0xc0,0xf8,0xf8,0xc0,0xc0,0xf8}, // E
  {0xf8,0xc0,0xc0,0xf8,0xf8,0xc0,0xc0,0xc0}, // F
  {0x00,0x3c,0x40,0x40,0x5c,0x44,0x44,0x78}, // G
  {0xd8,0xd8,0xd8,0xf8,0xf8,0xd8,0xd8,0xd8}, // H
  {0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70}, // I
  {0x00,0x7e,0x02,0x02,0x02,0x02,0x04,0x38}, // J
  {0xc8,0xc8,0xd0,0xf0,0xf0,0xd0,0xc8,0xc8}, // K
  {0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xf8}, // L
  {0x88,0xd8,0xf8,0xd8,0xd8,0xd8,0xd8,0xd8}, // M
  {0x88,0xc8,0xc8,0xe8,0xb8,0x98,0x98,0x98}, // N
  {0xf8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xf8}, // O
  {0xf8,0xc8,0xc8,0xc8,0xf8,0xc0,0xc0,0xc0}, // P
  {0x00,0x3c,0x42,0x42,0x52,0x4a,0x44,0x3a}, // Q
  {0xf0,0xc8,0xc8,0xf0,0xf0,0xc8,0xc8,0xc8}, // R
  {0xf8,0xc0,0xc0,0xf8,0x18,0x18,0x18,0xf8}, // S
  {0xf8,0x70,0x70,0x70,0x70,0x70,0x70,0x70}, // T
  {0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xf8}, // U
  {0x00,0x42,0x42,0x42,0x42,0x44,0x28,0x10}, // V
  {0x80,0x82,0x82,0x92,0x92,0x92,0x94,0x78}, // W
  {0x00,0x42,0x42,0x24,0x18,0x24,0x42,0x42}, // X
  {0x00,0x44,0x44,0x28,0x10,0x10,0x10,0x10}, // Y
  {0x00,0x7c,0x04,0x08,0x7c,0x20,0x40,0xfe}, // Z
};

bool mainSwitchPressed = false, secondarySwitchPressed = false, ternarySwitchPressed = false;

LEDMatrixDriver lmd(NUM_DEVICES, MATRIX_CS_PIN);

#if CLOCK_DS1302
  DS1302 rtc(CLOCK_RESET, CLOCK_DATA, CLOCK_CLOCK);
#else
  Rtc_Pcf8563 rtc;
#endif

unsigned int mode = MODE_CLOCK, modeSetClock, modeChrono, modeTimer, modeSetup;
unsigned int savedHour1, savedHour2, savedMinute1, savedMinute2, savedSecond1, savedSecond2, buzzerFrequency;
unsigned long chronoMillis, chronoPause, timer = 0, timerStart, timerPause;
unsigned int timeFormat, buzzerStepper;

const unsigned int ANIM_DELAY = 20;

char TXT_CLOCK[] = "CLOCK";
char TXT_SET_CLOCK[] = "SET CLOCK";
char TXT_CHRONO[] = "CHRONO";
char TXT_TIMER[] = "TIMER";
char TXT_SETUP[] = "SETUP";
char TXT_SETUP_TIME_SHORT[] = "SHORT TIME FORMAT";
char TXT_SETUP_TIME_FULL[] = "FULL TIME FORMAT";

void setup() {
  Serial.begin(9600);

  pinMode(MAIN_SWITCH_PIN, INPUT_PULLUP);
  pinMode(SECONDARY_SWITCH_PIN, INPUT_PULLUP);
  pinMode(TERNARY_SWITCH_PIN, INPUT_PULLUP);
  pinMode(BUZZER, OUTPUT);
  
  lmd.setEnabled(true);
  lmd.setIntensity(0);
  lmd.clear();
  lmd.display();

  timeFormat = getTimeFormat();
}

void loop() {
  /*
  Serial.print(getHour());
  Serial.print(":");
  Serial.print(getMinute());
  Serial.print(":");
  Serial.println(getSecond());
  delay(1000);
  */

  checkButton();

  switch(mode) {
    case MODE_CLOCK:
      displayTime();
      break;
    case MODE_SET_CLOCK:
      displaySetClock();
      break;
    case MODE_CHRONO:
      displayChrono();
      break;
    case MODE_TIMER:
      displayTimer();
      break;
    case MODE_SETUP:
      displaySetup();
      break;
  }

  delay(ANIM_DELAY);
}
